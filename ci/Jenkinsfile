def boolean hasChangesIn(String module) {
    if (env.CHANGE_TARGET == null) {
        return true;
    }

    def MASTER = sh(
        returnStdout: true,
        script: "git rev-parse remotes/upstream/${env.CHANGE_TARGET}"
    ).trim()

    // Gets commit hash of HEAD commit. Jenkins will try to merge master into
    // HEAD before running checks. If this is a fast-forward merge, HEAD does
    // not change. If it is not a fast-forward merge, a new commit becomes HEAD
    // so we check for the non-master parent commit hash to get the original
    // HEAD. Jenkins does not save this hash in an environment variable.
    def HEAD = sh(
        returnStdout: true,
        script: "git show -s --no-abbrev-commit --pretty=format:%P%n%H%n HEAD | tr ' ' '\n' | grep -v ${MASTER} | head -n 1"
    ).trim()

    return sh(
        returnStatus: true,
        script: "git diff --name-only ${MASTER}...${HEAD} | grep ${module}"
    ) == 0
}
pipeline { 
    agent any
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Run test') { 
            when {
                anyOf {
                    changeRequest() 
                    branch 'develop'
                    branch 'master'  
                }
            }
            agent { dockerfile true }
            steps { 
                sh label: 'Populate dotenv for tests', script: '''cat <<EOF > .env
                    # Entrypoint HTTP Server
                    NODE_ENV=development 
                    ENTRYPOINT_HTTP_PORT=12000

                    ENTRYPOINT_GRPC_PORT=3333

                    MONGO_PRIMARY_URI=mongodb://localhost:27017/mydb
                    MONGO_REPLICA_URI=mongodb://localhost:27017/mydb

                    KAFKA_HOST=localhost:9092
                    KAFKA_CONNECT_TIMEOUT=1000
                    TODO_TOPIC=todo_topic
                EOF'''
                sh label: 'Run tests', script: '''cp -rf /opt/node_modules .
                                        npm install
                                        npm run test-coverage
                                        '''
                archiveArtifacts artifacts: "output/coverage/jest/cobertura-coverage.xml" , fingerprint: true
                cobertura(
                    coberturaReportFile: "output/coverage/jest/cobertura-coverage.xml",
                    onlyStable: false,
                    failNoReports: true,
                    failUnhealthy: false,
                    failUnstable: false,
                    autoUpdateHealth: true,
                    autoUpdateStability: false,
                    zoomCoverageChart: true,
                    maxNumberOfBuilds: 0,
                    lineCoverageTargets: '10, 10, 10',
                    conditionalCoverageTargets: '10, 10, 10',
                    classCoverageTargets: '10, 10, 10',
                    fileCoverageTargets: '10, 10, 10',
                )
                cleanWs notFailBuild: true
            }
            post {
                unstable {
                    slackSend (color: '#FFFF33', message: "Unit tests is currently in")
                }
                failure {
                    slackSend (color: '#FF0000', message: "Unit tests is BELOW required target: Job")
                }
            }
        }
        stage('Development Build') {
            when {
                branch "develop"
                beforeAgent true
            }
            steps { 
                echo 'Development Build'
            }
        }
        stage('Development Release') {
            when {
                branch "develop"
                beforeAgent true
            }
            steps { 
                echo 'Development Release'
            }
        }
        stage('Production Build') {
            when {
                branch "master"
                beforeAgent true
            }
            steps { 
                echo 'Production Build'
            }
        }
        stage('Production Release') {
            when {
                branch "master"
                beforeAgent true
            }
            steps { 
                echo 'Production Release'
            }
        }
    }
}

// add plugin cobertura